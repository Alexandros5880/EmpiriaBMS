@using Microsoft.Extensions.Configuration
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Hosting
@using EmpiriaBMS.Front.Components.Admin
@using EmpiriaBMS.Front.Services

@inject TeamsFx teamsfx
@inject TeamsUserCredential teamsUserCredential
@inject MicrosoftTeams MicrosoftTeams
@inject IWebHostEnvironment HostEnvironment
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager
@inject IDataProvider DataProvider
@inject IMapper Mapper
@inject AuthorizeServices authorizeServices
@inject PageCachedService pageCached

@if(isLoading)
{
    <div style="display: flex; justify-content: center; align-items: center; min-height: 100vh;">
        <FilterProgressRing FilterLoading="@isLoading"/>
    </div>
}
else
{
    <FluentDesignSystemProvider AccentBaseColor="#6264A7">
        <Router AppAssembly="@typeof(Program).Assembly" PreferExactMatches="@true">
            <Found Context="routeData">
                @{
                    Type defaultLayoutType = SeeAdmin ? typeof(AdminLayout) : typeof(MainLayout);
                }
                <RouteView RouteData="@routeData" DefaultLayout="@defaultLayoutType" />
            </Found>
            <NotFound>
                @{
                    Type layoutType = SeeAdmin ? typeof(AdminLayout) : typeof(MainLayout);
                }
                <LayoutView Layout="@layoutType">
                    <p>Sorry, there's nothing at this address.</p>
                </LayoutView>
            </NotFound>
        </Router>
    </FluentDesignSystemProvider>

    <!-- Remove This -->
    <select class="form-select" @onchange="RoleSelectionChanged"
            style="position:fixed !important; bottom:0px !important; width: 200px; left: 10px;">
        @foreach (var role in _allRoles)
        {
            @if (@role.Name.Equals(authorizeServices.DefaultRoleName))
            {
                <option value="@role.Id" selected>@role.Name</option>
            }
            else
            {
                <option value="@role.Id">@role.Name</option>
            }
        }
    </select>
}


@code {
    bool _runInTeams = false;
    bool isLoading = true;

    #region Authorization Properties
    public bool SeeAdmin
    {
        get
        {
            return authorizeServices.PermissionOrds.Contains(7);
        }
    }
    public bool SeeDashboard
    {
        get
        {
            return authorizeServices.PermissionOrds.Contains(4);
        }
    }
    #endregion

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            var mySelf = pageCached.GetPage<App>();
            if (mySelf != null)
            {
                _runInTeams = mySelf._runInTeams;
                isLoading = false;
            }
            else
            {
                _runInTeams = await MicrosoftTeams.IsInTeams();
                await authorizeServices.Authorize(_runInTeams: _runInTeams);
                await GetAllRoles(); // TODO: Remove This
                isLoading = false;
                StateHasChanged();
            }
        }
    }

    protected override bool ShouldRender()
    {
        return true;
    }

    private string GetEnvironmentName()
    {
        return HostEnvironment.IsDevelopment() ? "local environment" : "Azure environment";
    }

    // TODO: Remove This
    // Engineer, Designer, Project Manager, CTO, COO, Guest, CEO, Customer, Admin
    private ICollection<RoleVM> _allRoles = new List<RoleVM>();

    private async Task RoleSelectionChanged(ChangeEventArgs e)
    {
        isLoading = true;
        var selectRoleId = Convert.ToInt32(e.Value);
        await authorizeServices.Authorize(selectRoleId, _runInTeams);
        authorizeServices.DefaultRoleName = _allRoles.FirstOrDefault(r => r.Id == selectRoleId).Name;
        NavigationManager.NavigateTo("/welcome");
        isLoading = false;
    }

    private async Task GetAllRoles()
    {
        var rolesDtos = await DataProvider.Roles.GetAll();
        var roles = Mapper.Map<List<RoleVM>>(rolesDtos);
        _allRoles.Clear();
        roles.ForEach(_allRoles.Add);
    }
}
