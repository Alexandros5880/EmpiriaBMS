@inherits LayoutComponentBase

@using EmpiriaBMS.Core.Dtos
@using Microsoft.Extensions.Configuration
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Hosting
@using EmpiriaBMS.Front.Components.Admin
@using EmpiriaBMS.Front.Services
@using EmpiriaBMS.Front.Horizontal
@using System.Net.Http.Headers

@inject TeamsUserCredential teamsUserCredential
@inject MicrosoftTeams MicrosoftTeams
@inject IWebHostEnvironment HostEnvironment
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager
@inject IDataProvider DataProvider
@inject IMapper Mapper
@inject AuthorizeServices authorizeServices
@inject SharedAuthDataService _sharedAuthData
@inject HttpClient HttpClient
@inject IDialogService DialogService


@if (!isLoading)
{
    @if (refreshed)
    {
        <div class="container-fluid">
            <div class="row flex-nowrap">
                @Body
                <FluentDialogProvider />
            </div>
        </div>
    }

    <!-- Select User For Debuging -->
    @if (HostEnvironment.EnvironmentName.Equals("Development"))
    {
        <select class="form-select" @onchange="UsersSelectionChanged"
                style="position:fixed !important; bottom:0px !important; width: auto; right: 10px; z-index: 1000;">
            @foreach (var _user in _allUsers)
            {
                @if (@_user.Id.Equals(_sharedAuthData?.LogedUser?.Id))
                {
                    <option value="@_user?.Id" selected>
                        @_user.LastName @_user.FirstName  -->  [
                        @foreach (var r in _user.Roles)
                        {
                            <span>&nbsp; &nbsp; @r.Name &nbsp; &nbsp;</span>
                        }
                        ]
                    </option>
                }
                else
                {
                    <option value="@_user?.Id">
                        @_user.LastName @_user.FirstName  -->  [
                        @foreach (var r in _user.Roles)
                        {
                            <span>&nbsp; &nbsp; @r.Name &nbsp; &nbsp;</span>
                        }
                        ]
                    </option>
                }
            }
        </select>
    }
}
else
{
    <Welcome />

    @*
    <div style="display: flex; justify-content: center; align-items: center; margin-top: 20%;">
        <FluentProgressRing />
    </div>
    *@

    @* <div style="display: flex; justify-content: center; align-items: center; min-height: 100vh;">
        <FilterProgressRing FilterLoading="@_startLoading" />
    </div> *@

}

@code {
    bool _runInTeams = false;
    bool isLoading = true;
    bool refreshed = true;

    #region Authorization Properties
    public bool SeeAdmin
    {
        get
        {
            return _sharedAuthData.PermissionOrds.Contains(7);
        }
    }
    public bool SeeDashboard
    {
        get
        {
            return _sharedAuthData.PermissionOrds.Contains(1);
        }
    }
    private string _userName => 
        _sharedAuthData.LogedUser.LastName + " " + _sharedAuthData.LogedUser.FirstName;
    #endregion

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            _runInTeams = await MicrosoftTeams.IsInTeams();

            // For Debuging Only
            if (HostEnvironment.EnvironmentName.Equals("Development"))
                await GetAllUsers();

            authorizeServices.CallBackOnAuthorize += _afterAuthCallBack;
            var result = await authorizeServices.Authorize(runInTeams: _runInTeams);
            if (!result)
                NavigationManager.NavigateTo("/loginpage");
        }
    }

    private async Task _afterAuthCallBack()
    {
        isLoading = false;
        await Task.Delay(1);
        StateHasChanged();
    }

    private string GetEnvironmentName()
    {
        return HostEnvironment.IsDevelopment() ? "local environment" : "Azure environment";
    }

    #region For Debuging Only
    private ICollection<UserDto> _allUsers = new List<UserDto>();

    private async Task UsersSelectionChanged(ChangeEventArgs e)
    {
        refreshed = false;
        var selectUserId = Convert.ToInt32(e.Value);
        await authorizeServices.Authorize(selectUserId, _runInTeams);
        refreshed = true;
        StateHasChanged();
    }

    private async Task GetAllUsers()
    {
        var users = await DataProvider.Users.GetAllWithRoles();
        _allUsers.Clear();
        users.Where(u => u.Roles.Count > 0).ToList().ForEach(_allUsers.Add);
    }
    #endregion
}
