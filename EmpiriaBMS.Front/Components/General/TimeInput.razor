
<div class="input-group text-center" style="width:118px; margin: 0 auto !important;">
    
    <input class="form-control"
           type="number"
           @bind="@Hours"
           placeholder="H"
           style="min-width: 45px !important; max-width: 45px !important;"
           min="@MinTime.Hours"
           max="@_remainingTime.TotalHours"
           @onmousewheel="@((WheelEventArgs e) => HandleMouseWheel(e, "hours"))"
           @onfocus="@(() => _remainingTime = MaxTime)" />

    <div class="input-group-append">
        <span class="input-group-text">:</span>
    </div>
    
    <input class="form-control"
           type="number"
           @bind="@Minutes"
           placeholder="M"
           style="min-width: 45px !important; max-width: 45px !important;"
           min="@MinTime.Minutes"
           max="60"
           @onmousewheel="@((WheelEventArgs e) => HandleMouseWheel(e, "minutes"))"
           @onfocus="@(() => _remainingTime = MaxTime)" />

</div>

@code {
    [Parameter]
    public TimeSpan Time { get; set; }

    private TimeSpan _minTime = new TimeSpan(0, 0, 0, 0);
    [Parameter]
    public TimeSpan MinTime
    {
        get => _minTime;
        set
        {
            if (value == _minTime) return;
            _minTime = value;
        }
    }

    private TimeSpan _maxTime = new TimeSpan(0, 23, 60, 0);
    [Parameter]
    public TimeSpan MaxTime
    {
        get => _maxTime;
        set
        {
            if (value == _maxTime) return;
            _maxTime = value;
        }
    }

    [Parameter]
    public Action<TimeSpan> OnPropertyChanged { get; set; }

    private TimeSpan _remainingTime;

    private double _prevHours;
    private double _hours;
    public double Hours
    {
        get => _hours;
        set
        {
            value = value > _remainingTime.TotalHours ? _remainingTime.TotalHours : value;
            value = value < MinTime.TotalHours ? MinTime.TotalHours : value;
            _hours = value;

            var time = TimeSpan.FromHours(_hours - _prevHours);
            _prevHours = _hours;
            Time = Time.Add(time);

            OnPropertyChanged(Time);
        }
    }

    private double _prevMinutes;
    private double _minutes;
    public double Minutes
    {
        get => _minutes;
        set
        {
            value = value > _remainingTime.TotalMinutes ? _remainingTime.TotalMinutes : value;
            value = value > 60 ? 60 : value;
            value = value < MinTime.TotalMinutes ? MinTime.TotalMinutes : value;
            _minutes = value;

            var time = TimeSpan.FromMinutes(_minutes - _prevMinutes);
            _prevMinutes = _minutes;
            Time = Time.Add(time);

            OnPropertyChanged(Time);
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _remainingTime = MaxTime;
    }

    private void HandleMouseWheel(WheelEventArgs e, string type)
    {
        int value = (int)e.DeltaY;

        if (type == "hours")
        {
            if (value < 0)
                Hours = Hours + 1;
            else
                Hours = Hours - 1;
        }

        else if (type == "minutes")
        {
            if (value < 0)
                Minutes = Minutes + 1;
            else
                Minutes = Minutes - 1;
        }
    }
}
