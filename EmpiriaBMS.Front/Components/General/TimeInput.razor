@inject MicrosoftTeams MicrosoftTeams

<input id="timeInput"
       class="form-control"
       type="text"
       value="@TimeAsString"
       placeholder="HH:MM"
       style="max-width: 74px !important;"
       @onchange=@((e) => OnPropertyChanged.InvokeAsync(e)) />

@code {

    [Parameter]
    public TimeSpan Time { get; set; }

    private string _prevMin;
    private TimeSpan _min;
    [Parameter]
    public TimeSpan Min
    {
        get => _min;
        set
        {
            if (value == _min) return;
            _min = value;
            if (value.ToString(@"hh\:mm") != _prevMin)
            {
                _prevMin = value.ToString(@"hh\:mm");
                MicrosoftTeams.ApplyTimeMask("timeInput", _prevMin, _prevMax);
            }
        }
    }

    private string _prevMax;
    private TimeSpan _max;
    [Parameter]
    public TimeSpan Max
    {
        get => _max;
        set
        {
            if (value == _max) return;
            _max = value;
            if (value.ToString(@"hh\:mm") != _prevMax) {
                _prevMax = value.ToString(@"hh\:mm");
                MicrosoftTeams.ApplyTimeMask("timeInput", MinAsString, _prevMax);
            }
        }
    }

    private string TimeAsString
    {
        get => Time.ToString(@"hh\:mm");
        set
        {
            if (TimeSpan.TryParseExact(value, @"hh\:mm\:ss", null, out TimeSpan parsedTime))
            {
                Time = parsedTime;
            }
        }
    }

    private string MinAsString
    {
        get => Min.ToString(@"hh\:mm");
        set
        {
            if (TimeSpan.TryParseExact(value, @"hh\:mm\:ss", null, out TimeSpan parsedTime))
            {
                Min = parsedTime;
            }
        }
    }

    private string MaxAsString
    {
        get => Max.ToString(@"hh\:mm");
        set
        {
            if (TimeSpan.TryParseExact(value, @"hh\:mm\:ss", null, out TimeSpan parsedTime))
            {
                Max = parsedTime;
            }
        }
    }

    [Parameter]
    public EventCallback<ChangeEventArgs> OnPropertyChanged { get; set; }

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (firstRender)
    //     {
    //         await MicrosoftTeams.ApplyTimeMask("timeInput", MinAsString, MaxAsString);
    //     }
    // }
}
