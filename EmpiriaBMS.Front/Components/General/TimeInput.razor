@inject MicrosoftTeams MicrosoftTeams

<div class="input-group" style="width:150px;">
    
    <input class="form-control"
           type="number"
           value="@Time.Hours"
           placeholder="HH"
           style="min-width: 45px !important; max-width: 45px !important;"
           min="0"
           max="24"
           onkeyup="if(value<0) value=0; if(value>24) value=24;"
           onmousewheel="(e) => {if(e.deltaY > 1) {value++;} else if (e.deltaY < -1) {value--;}}"
           @onchange=@((e) => _onHoursChanged(e)) />

    <div class="input-group-append">
        <span class="input-group-text">:</span>
    </div>
    
    <input class="form-control"
           type="number"
           value="@Time.Minutes"
           placeholder="MM"
           style="min-width: 45px !important; max-width: 45px !important;"
           min="0"
           max="60"
           onkeyup="if(value<0) value=0; if(value>60) value=60;"
           onmousewheel="(e) => {if(e.deltaY > 1) {value++;} else if (e.deltaY < -1) {value--;}}"
           @onchange=@((e) => _onMinutesChanged(e)) />

</div>

<style>

    /* Chrome, Safari, Edge, Opera */
    input::-webkit-outer-spin-button,
    input::-webkit-inner-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }

    /* Firefox */
    input[type=number] {
        -moz-appearance: textfield;
    }

</style>


@code {

    [Parameter]
    public TimeSpan Time { get; set; }

    private string _prevMin;
    private TimeSpan _min;
    [Parameter]
    public TimeSpan Min
    {
        get => _min;
        set
        {
            if (value == _min) return;
            _min = value;
            if (value.ToString(@"hh\:mm") != _prevMin)
            {
                _prevMin = value.ToString(@"hh\:mm");
                //MicrosoftTeams.ApplyTimeMask("timeInput", _prevMin, _prevMax);
            }
        }
    }

    private string _prevMax;
    private TimeSpan _max;
    [Parameter]
    public TimeSpan Max
    {
        get => _max;
        set
        {
            if (value == _max) return;
            _max = value;
            if (value.ToString(@"hh\:mm") != _prevMax) {
                _prevMax = value.ToString(@"hh\:mm");
                //MicrosoftTeams.ApplyTimeMask("timeInput", MinAsString, _prevMax);
            }
        }
    }

    private string TimeAsString
    {
        get => Time.ToString(@"hh\:mm");
        set
        {
            if (TimeSpan.TryParseExact(value, @"hh\:mm\:ss", null, out TimeSpan parsedTime))
            {
                Time = parsedTime;
            }
        }
    }

    [Parameter]
    public EventCallback<TimeSpan> OnPropertyChanged { get; set; }


    private async Task _onHoursChanged(ChangeEventArgs e)
    {
        int hours = Convert.ToInt32(e.Value);

        // if (Min.Hours < hours)
        //     hours = Min.Hours;

        // if (Max.Hours < hours)
        //     hours = Max.Hours;

        // Time = new TimeSpan(hours, Time.Minutes, Time.Seconds);
        // await OnPropertyChanged.InvokeAsync(Time);
    }

    private async Task _onMinutesChanged(ChangeEventArgs e)
    {
        var minutes = Convert.ToInt32(e.Value);

        // if (Min.Minutes < minutes)
        //     minutes = Min.Minutes;

        // if (Max.Minutes < minutes)
        //     minutes = Max.Minutes;

        // Time = new TimeSpan(Time.Hours, minutes, Time.Seconds);
        // await OnPropertyChanged.InvokeAsync(Time);
    }




    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (firstRender)
    //     {
    //         await MicrosoftTeams.ApplyTimeMask("timeInput", MinAsString, MaxAsString);
    //     }
    // }
}
