
<div class="input-group text-center" style="width:118px; margin: 0 auto !important;">
    
    <input class="form-control"
           type="number"
           value="@Time.Hours"
           placeholder="HH"
           style="min-width: 45px !important; max-width: 45px !important;"
           min="@MinTime.Hours"
           max="@MaxTime.Hours"
           onmousewheel="if(e.deltaY > 1) value++; else if (e.deltaY < -1) value--;"
           onkeyup="if(value<min) value=min; if(value>max) value=max;"
           @onchange=@((e) => _onHoursChanged(e)) />

    <div class="input-group-append">
        <span class="input-group-text">:</span>
    </div>
    
    <input class="form-control"
           type="number"
           value="@Time.Minutes"
           placeholder="MM"
           style="min-width: 45px !important; max-width: 45px !important;"
           min="@MinTime.Minutes"
           max="@MaxTime.Minutes"
           onmousewheel="(e) => {if(e.deltaY > 1) {value++;} else if (e.deltaY < -1) {value--;}}"
           onkeyup="if(value<min) value=min; if(value>max) value=max;"
           @onchange=@((e) => _onMinutesChanged(e)) />

</div>

@code {
    [Parameter]
    public TimeSpan Time { get; set; }

    private TimeSpan _minTime = new TimeSpan(0, 0, 0, 0);
    [Parameter]
    public TimeSpan MinTime
    {
        get => _minTime;
        set
        {
            if (value == _minTime) return;
            _minTime = value;
        }
    }

    private TimeSpan _maxTime = new TimeSpan(0, 23, 60, 0);
    [Parameter]
    public TimeSpan MaxTime
    {
        get => _maxTime;
        set
        {
            if (value == _maxTime) return;
            _maxTime = value;
        }
    }

    [Parameter]
    public EventCallback<TimeSpan> OnPropertyChanged { get; set; }

    private async Task _onHoursChanged(ChangeEventArgs e)
    {
        int hours = Convert.ToInt32(e.Value);
        Time = new TimeSpan(hours, Time.Minutes, Time.Seconds);
        await OnPropertyChanged.InvokeAsync(Time);
    }

    private async Task _onMinutesChanged(ChangeEventArgs e)
    {
        var minutes = Convert.ToInt32(e.Value);
        Time = new TimeSpan(Time.Hours, minutes, Time.Seconds);
        await OnPropertyChanged.InvokeAsync(Time);
    }

}
