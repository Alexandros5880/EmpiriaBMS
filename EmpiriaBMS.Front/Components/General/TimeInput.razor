@inject MicrosoftTeams MicrosoftTeams

<div class="input-group" style="width:150px;">
    
    <input class="form-control"
           type="number"
           value="@Time.Hours"
           placeholder="HH"
           style="min-width: 45px !important; max-width: 45px !important;"
           min="@Min.Hours"
           max="@Max.Hours"
           onmousewheel="if(e.deltaY > 1) value++; else if (e.deltaY < -1) value--;"
           onkeyup="if(value<min) value=min; if(value>max) value=max;"
           @onchange=@((e) => _onHoursChanged(e)) />

    <div class="input-group-append">
        <span class="input-group-text">:</span>
    </div>
    
    <input class="form-control"
           type="number"
           value="@Time.Minutes"
           placeholder="MM"
           style="min-width: 45px !important; max-width: 45px !important;"
           min="0"
           max="60"
           onmousewheel="(e) => {if(e.deltaY > 1) {value++;} else if (e.deltaY < -1) {value--;}}"
           onkeyup="if(value<min) value=min; if(value>max) value=max;"
           @onchange=@((e) => _onMinutesChanged(e)) />

</div>

@code {

    [Parameter]
    public TimeSpan Time { get; set; }

    private string _prevMin;
    private TimeSpan _min = new TimeSpan(24,60,60);
    [Parameter]
    public TimeSpan Min
    {
        get => _min;
        set
        {
            if (value == _min) return;
            _min = value;
            if (value.ToString(@"hh\:mm") != _prevMin)
            {
                _prevMin = value.ToString(@"hh\:mm");
                //MicrosoftTeams.ApplyTimeMask("timeInput", _prevMin, _prevMax);
            }
        }
    }

    private string _prevMax;
    private TimeSpan _max = new TimeSpan(24, 60, 60);
    [Parameter]
    public TimeSpan Max
    {
        get => _max;
        set
        {
            if (value == _max) return;
            _max = value;
            if (value.ToString(@"hh\:mm") != _prevMax) {
                _prevMax = value.ToString(@"hh\:mm");
                //MicrosoftTeams.ApplyTimeMask("timeInput", MinAsString, _prevMax);
            }
        }
    }

    [Parameter]
    public EventCallback<TimeSpan> OnPropertyChanged { get; set; }

    private async Task _onHoursChanged(ChangeEventArgs e)
    {
        int hours = Convert.ToInt32(e.Value);
        Time = new TimeSpan(hours, Time.Minutes, Time.Seconds);
        await OnPropertyChanged.InvokeAsync(Time);
    }

    private async Task _onMinutesChanged(ChangeEventArgs e)
    {
        var minutes = Convert.ToInt32(e.Value);
        Time = new TimeSpan(Time.Hours, minutes, Time.Seconds);
        await OnPropertyChanged.InvokeAsync(Time);
    }

}
