@page "/clients"

@using EmpiriaBMS.Front.Services
@using EmpiriaBMS.Models.Enum;

@inject IDataProvider DataProvider
@inject MicrosoftTeams MicrosoftTeams
@inject IMapper Mapper
@inject IDialogService DialogService
@inject Logging.LoggerManager Logger

<div class="mt-1 ms-2 me-2 row">

    <!-- Filters -->
    <div class="col-xxl-9 col-xl-9 col-12">
        <div class="d-flex flex-wrap
                    justify-content-xxl-start
                    justify-content-xl-start
                    justify-content-lg-start
                    justify-content-md-start
                    justify-content-sm-start
                    justify-content-center"
             style="column-gap: 10px; row-gap: 5px;">

            <div style="width: 160px;">
                <FluentCombobox @ref="_resultFilterCombo"
                                Label="Result:"
                                Autocomplete="ComboboxAutocomplete.Both"
                                Multiple="false"
                                Placeholder="Select Result..."
                                Items="_clientsResults"
                                Width="200px"
                                TOption="(string Value, string Text)"
                                OptionText="@(c => c.Text)"
                                OptionValue="@(c => c.Value)"
                                @bind-Value="_selectedResultValue"
                                SelectedOptionChanged="@(async (o) => await _onResultSelectionChanged(o))" />
            </div>

        </div>
    </div>

    <!-- Add/Export Button -->
    <div class="col-xxl-3 col-xl-3 col-12 mt-xxl-0 mt-xl-0 mt-2">
        <FluentStack HorizontalAlignment="HorizontalAlignment.End"
                     Style="margin-right: 10px; min-width: 300px;">

            <!-- Add -->
            @if (IsWorkingMode)
            {
                <FluentButton IconStart="@(new Icons.Regular.Size16.Add())"
                              Appearance="Appearance.Accent"
                              OnClick="@_add">
                    Add Client
                </FluentButton>
            }

            @if (IsWorkingMode)
            {
                <!-- Import -->
                <InputFile @ref="@fileInput" OnChange="ImportFromCSV" style="display: none;" />
                <FluentButton IconStart="@(new Icons.Regular.Size16.ArrowImport())"
                              Appearance="Appearance.Outline"
                              OnClick="@(async () => await TriggerFileInput())">
                    Import
                </FluentButton>
            }

            <!-- Export -->
            <FluentButton IconStart="@(new Icons.Regular.Size16.ArrowExport())"
                          Appearance="Appearance.Outline"
                          OnClick="@(async (e) => await ExportToCSV())"
                          Disabled="@(FilteredItems?.Count() == 0)">
                Export
            </FluentButton>

        </FluentStack>
    </div>

</div>


<div class="row mt-1">

    @if (_loading)
    {
        <div class="col-12 mt-5 mb-5">
            <FluentProgressRing Style="margin: 0 auto;" />
        </div>
    }
    else 
    {
        <div class="col-12">
            <div class="border border-1 rounded mt-2 m-2" style="height: 280px;">
                <FluentDataGrid Items="@FilteredItems"
                                ResizableColumns=true
                                Pagination="@pagination"
                                TGridItem="ClientVM"
                                OnRowFocus="HandleRowFocus"
                                GridTemplateColumns="2fr 2fr 2fr 2fr 100px"
                                style="height: 280px; overflow:auto;">

                    <!-- Result -->
                    <TemplateColumn Title="Result" Sortable="true">
                        <ChildContent>
                            @if (IsWorkingMode)
                            {
                                <select class="form-select" @onchange="@(async e => await HandleResultChange(context, e))">
                                    @foreach (var result in Enum.GetValues(typeof(ClientResult)).Cast<ClientResult>())
                                    {
                                        <option value="@(result)" selected="@(context.Result == result)">
                                            @result.GetDisplayName()
                                        </option>
                                    }
                                </select>
                            }
                            else
                            {
                                <span>@context.Result.GetDisplayName()</span>
                            }
                        </ChildContent>
                    </TemplateColumn>

                    <TemplateColumn Title="Name"
                                    Sortable="true"
                                    InitialSortDirection=SortDirection.Descending
                                    IsDefaultSortColumn=true>
                        <ColumnOptions>
                            <div class="search-box">
                                <FluentSearch type="search"
                                              Autofocus=true
                                              @bind-Value="@_filterString"
                                              Placeholder="Name..."
                                              @oninput="@HandleFilter" />
                            </div>
                        </ColumnOptions>
                        <ChildContent>
                            @(context.Name)
                        </ChildContent>
                    </TemplateColumn>

                    <PropertyColumn Property="@(p => p.CompanyName)" Sortable="true" Title="Company" Align="@Align.Start" />
                    <PropertyColumn Property="@(p => p.AddressFormated)" Sortable="true" Title="Address" Align="@Align.Start" />

                    @if (IsWorkingMode)
                    {
                        <TemplateColumn Title="Actions" Align="@Align.End">
                            <FluentButton aria-label="Edit" IconEnd="@(new Icons.Regular.Size16.Edit())" OnClick="@(() => _edit(context))" />
                            <FluentButton aria-label="Delete" IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="@(() => _delete(context))" />
                        </TemplateColumn>
                    }

                </FluentDataGrid>
            </div>
            <div style="min-width: 50%;">
                <FluentPaginator State="@pagination">
                    <SummaryTemplate>
                        There are <strong>@(pagination.TotalItemCount ?? 0)</strong> rows
                    </SummaryTemplate>
                    <PaginationTextTemplate>
                        This is page <strong>@(pagination.CurrentPageIndex + 1)</strong> out of a total of <strong>@(pagination.LastPageIndex + 1)</strong> pages
                    </PaginationTextTemplate>
                </FluentPaginator>
            </div>
        </div>
    }
</div>