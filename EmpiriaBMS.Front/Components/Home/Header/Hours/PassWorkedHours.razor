@using EmpiriaBMS.Front.Services
@using EmpiriaBMS.Front.Components.Home;

@inject IDataProvider _dataProvider
@inject IMapper Mapper
@inject SharedAuthDataService _sharedAuthData
@inject TimerService TimerService
@inject Logging.LoggerManager Logger

<!-- Headder -->
<div class="d-flex justify-content-between">

    @if (DisplayTitle)
    {
        <h3>Work Hours Update</h3>
    }

    <h3>
        My Time Since Start: <b class="text-warning">
            @if (RemainingTime.Days > 0)
            {
                @RemainingTime.ToString(@"d' days, 'hh\:mm")
            }
            else
            {
                @RemainingTime.ToString(@"hh\:mm")
            }
        </b>
    </h3>
</div>

<div style="max-height: 80vh; overflow-y: auto; overflow-x: hidden;">

    <div class="mt-1 row gx-2 ms-1 me-1">

        <!-- Select Client -->
        @if (workOnClients || seeAdmin)
        {
            <div class="col selections">
                <div class="text-center">
                    <h5>Select Client</h5>
                </div>
                <div class="select-wrapper form-column form-column-field">
                    <select class="form-select form-select-lg"
                            aria-label="Select Client"
                            value="@_selectedClient?.Id"
                            @onchange="@(async (ChangeEventArgs e) => await OnSelectClient(Convert.ToInt32(e.Value)))"
                            disabled="@_hasChanges">
                        <option value="0" selected>Select Client</option>
                        @foreach (var client in _clients)
                        {
                            <option value="@client.Id">
                                @client.Name
                            </option>
                        }
                    </select>
                </div>
            </div>
        }

        <!-- Select Offer -->
        @if (workOnOffers || seeAdmin && (_selectedClient != null && _selectedClient.Id != 0))
        {
            <div class="col selections">
                <div class="text-center">
                    <h5>Select Offer</h5>
                </div>
                <div class="select-wrapper form-column form-column-field">
                    <select class="form-select form-select-lg"
                            aria-label="Select Offer"
                            value="@_selectedOffer?.Id"
                            @onchange="@(async (ChangeEventArgs e) => await OnSelectOffer(Convert.ToInt32(e.Value)))"
                            disabled="@_hasChanges">
                        <option value="0" selected>Select Offer</option>
                        @foreach (var offer in _offers)
                        {
                            <option value="@offer.Id">
                                @offer.Code
                            </option>
                        }
                    </select>
                </div>
            </div>
        }

        <!-- Select Project -->
        @if (!workOnOffers || (_selectedOffer != null && _selectedOffer.Id != 0))
        {
            <div class="col selections">
                <div class="text-center">
                    <h5>Select Project</h5>
                </div>
                <div class="select-wrapper form-column form-column-field">
                    <select class="form-select form-select-lg"
                            aria-label="Select Project"
                            value="@_selectedProject?.Id"
                            @onchange="@(async (ChangeEventArgs e) => await OnSelectProject(Convert.ToInt32(e.Value)))"
                            disabled="@_hasChanges">
                        <option value="0" selected>Select Project</option>
                        @foreach (var project in _projects)
                        {
                            <option value="@project.Id">
                                @project.Name
                            </option>
                        }
                    </select>
                </div>
            </div>
        }

        <!-- Discipline -->
        @if (_selectedProject != null && _selectedProject.Id != 0)
        {
            <div class="col selections">
                <div class="text-center">
                    <h5>Select Discipline</h5>
                </div>
                <div class="select-wrapper form-column form-column-field">
                    <select class="form-select form-select-lg"
                            aria-label="Select Discipline"
                            value="@_selectedDiscipline?.Id"
                            @onchange="@(async (ChangeEventArgs e) => await OnSelectDiscipline(Convert.ToInt32(e.Value)))"
                            disabled="@_hasChanges">
                        <option value="0" selected>Select Discipline</option>
                        @foreach (var discipline in _disciplines)
                        {
                            <option value="@discipline.Id">
                                @discipline.Type.Name
                            </option>
                        }
                    </select>
                </div>
            </div>
        }

    </div>

    <!-- When has changes Displayes MSG -->
    @if (_hasChanges)
    {
        <div class="ms-1 me-1">
            <span class="text-warning">
                Update changes to this point to enable selections!
            </span>
        </div>
    }

    <FluentStack Class="mt-1">

        <!-- Deliverables -->
        @if (_selectedDiscipline != null && _selectedDiscipline.Id != 0)
        {
            <div>
                <div class="text-center">
                    <h5>Deliverables</h5>
                </div>
                <div class="table-responsive"
                     style="height: 240px;">
                    <table class="table table-hover table-borderless">
                        <thead>
                            <tr>
                                <th scope="col" class="sticky-header">Deliverable</th>
                                <th scope="col" class="sticky-header">Time</th>
                                <th scope="col" class="sticky-header">Declared Completion</th>
                                <th scope="col" class="sticky-header">Date</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var _deliverable in _deliverables)
                            {
                                <tr class="align-middle">
                                    <td class="align-middle">
                                        <div class="align-middle h-100"><labe>@_deliverable.Type.Name</labe></div>
                                    </td>
                                    <td class="align-middle nowrap-td">
                                        <TimeInput MinTime="@TimeSpan.Zero"
                                                   MaxTime="@RemainingTime"
                                                   Time="_deliverable.Time"
                                                   OnPropertyChanged=@((time) => _onDeliverableTimeChanged(_deliverable, time)) />
                                    </td>
                                    <td class="align-middle">
                                        <div class="input-group" style="width: 120px;">
                                            <input type="number"
                                                   class="form-control"
                                                   EnableMinMax="true"
                                                   min="0"
                                                   max="100"
                                                   style="width: 80px;"
                                                   onkeyup="if(value<0) value=0; if(value>100) value=100;"
                                                   onmousewheel="(e) => {if(e.deltaY > 1) {value++;} else if (e.deltaY < -1) {value--;}}"
                                                   @onchange=@((e) => _onDeliverableCompletedChanged(_deliverable, e.Value))>
                                            <div class="input-group-append">
                                                <span class="input-group-text">%</span>
                                            </div>
                                        </div>
                                    </td>
                                    <td class="align-middle">
                                        <div class="input-group" style="width: 128px;">
                                            <FluentDatePicker Value="@_deliverable.TimeDatePassed"
                                                              Appearance="FluentInputAppearance.Outline"/>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }

        <!-- Supportive Works -->
        @if (_selectedDiscipline != null && _selectedDiscipline.Id != 0)
        {
            <div>
                <div class="text-center">
                    <h5>Supportive Works</h5>
                </div>
                <div class="table-responsive"
                     style="height: 240px;">
                    <table class="table table-hover table-borderless">
                        <thead>
                            <tr>
                                <th scope="col" class="sticky-header">Other</th>
                                <th scope="col" class="sticky-header">Time</th>
                                <th scope="col" class="sticky-header">Date</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var _supportiveWork in _supportiveWork)
                            {
                                <tr class="align-middle">
                                    <td class="align-middle">
                                        <div class="align-middle h-100"><labe>@_supportiveWork.Type.Name</labe></div>
                                    </td>
                                    <td class="align-middle nowrap-td" style="width: 120px;">
                                        <TimeInput MinTime="@TimeSpan.Zero"
                                                   MaxTime="@RemainingTime"
                                                   Time="@_supportiveWork.Time"
                                                   OnPropertyChanged=@((time) => _onOtherTimeChanged(_supportiveWork, time)) />
                                    </td>
                                    <td class="align-middle">
                                        <div class="input-group" style="width: 128px;">
                                            <FluentDatePicker Value="@_supportiveWork.TimeDatePassed"
                                                              Appearance="FluentInputAppearance.Outline" />
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }

    </FluentStack>

    <!-- General Time -->
    <div class="mt-2 mb-2">
        
        @{
            var seeSetUserWithHighRolesTime = _selectedClient != null && _selectedClient.Id != 0
                                                || _selectedOffer != null && _selectedOffer.Id != 0
                                                || _selectedProject != null && _selectedProject.Id != 0;

            var seeSetUserExtraTime = _loggedUser != null && _loggedUser.Id != 0;

            var seeGeneralTime = seeSetUserWithHighRolesTime || seeSetUserExtraTime;

            var minTime = TimeSpan.Zero;
        }

        @if (seeGeneralTime)
        {
            <FluentAccordion>
                <FluentAccordionItem Expanded="false">
                    <HeadingTemplate>
                        <div class="accordion-header">
                            <h3>General Time</h3>
                        </div>
                    </HeadingTemplate>
                    <ChildContent>

                        <div class="p-2">
                        
                            <!-- Set User With High Roles Time -->
                            @if (seeSetUserWithHighRolesTime)
                            {
                                <div class="mb-1">
                                    <div class="row gx-3 m-2 w-96">

                                        @if ((workOnClients || seeAdmin) && (_selectedClient != null && _selectedClient.Id != 0))
                                        {
                                            <div class="col-3">
                                                <span class="text-start">Client</span>
                                                <TimeInput MinTime="@TimeSpan.Zero"
                                                           MaxTime="@RemainingTime"
                                                           Time="_selectedClient.Time"
                                                           OnPropertyChanged=@((time) => _onClientTimeChanged(_selectedClient, time)) />
                                                <div class="input-group" style="width: 150px;">
                                                    <FluentDatePicker Value="@_selectedClient.TimeDatePassed"
                                                                      Appearance="FluentInputAppearance.Outline" />
                                                </div>
                                            </div>
                                        }

                                        @if ((workOnOffers || seeAdmin) && (_selectedOffer != null && _selectedOffer.Id != 0))
                                        {
                                            <div class="col-3">
                                                <span class="text-start">Offer</span>
                                                <TimeInput MinTime="@TimeSpan.Zero"
                                                           MaxTime="@RemainingTime"
                                                           Time="_selectedOffer.Time"
                                                           OnPropertyChanged=@((time) => _onOfferTimeChanged(_selectedOffer, time)) />
                                                <div class="input-group" style="width: 150px;">
                                                    <FluentDatePicker Value="@_selectedOffer.TimeDatePassed"
                                                                      Appearance="FluentInputAppearance.Outline" />
                                                </div>
                                            </div>
                                        }

                                        @if ((workOnProject || seeAdmin) && (_selectedProject != null && _selectedProject.Id != 0))
                                        {
                                            <div class="col-3">
                                                <span class="text-start">Project</span>
                                                <TimeInput MinTime="@TimeSpan.Zero"
                                                           MaxTime="@RemainingTime"
                                                           Time="_selectedProject.Time"
                                                           OnPropertyChanged=@((time) => _onProjectTimeChanged(_selectedProject, time)) />
                                                <div class="input-group" style="width: 150px;">
                                                    <FluentDatePicker Value="@_selectedProject.TimeDatePassed"
                                                                      Appearance="FluentInputAppearance.Outline" />
                                                </div>
                                            </div>
                                        }

                                        @if ((workOnProject || seeAdmin) && (_selectedDiscipline != null && _selectedDiscipline.Id != 0))
                                        {
                                            <div class="col-3">
                                                <span class="text-start">Discipline</span>
                                                <TimeInput MinTime="@TimeSpan.Zero"
                                                           MaxTime="@RemainingTime"
                                                           Time="_selectedDiscipline.Time"
                                                           OnPropertyChanged=@((time) => _onDisciplineTimeChanged(_selectedDiscipline, time)) />
                                                <div class="input-group" style="width: 150px;">
                                                    <FluentDatePicker Value="@_selectedDiscipline.TimeDatePassed"
                                                                      Appearance="FluentInputAppearance.Outline" />
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }

                            <!-- Set User Extra Time -->
                            @if (seeSetUserExtraTime)
                            {
                                <div class="mb-1">
                                    <SetUserTime LogedUserTimes="@_editLogedUserTimes"
                                                 RemainingTime="@RemainingTime"
                                                 MinTime="@minTime"
                                                 OnPersonalTimeChanged="@_onPersonalTimeChanged"
                                                 OnTrainingTimeChanged="@_onTrainingTimeChanged"
                                                 OnCorporateTimeChanged="@_onCorporateTimeChanged"
                                                 OnPersonalTimeDateChanged="@_onPersonalTimeDateChanged"
                                                 OnTrainingTimeDateChanged="@_onTrainingTimeDateChanged"
                                                 OnCorporateTimeDateChanged="@_onCorporateTimeDateChanged"
                                                 DisplayDateInput ="true"/>
                                </div>
                            }

                        </div>

                    </ChildContent>
                </FluentAccordionItem>
            </FluentAccordion>
        }

    </div>

    <FluentStack class="mt-2 mb-4"
                 Orientation="Orientation.Horizontal"
                 HorizontalAlignment="HorizontalAlignment.End">
        <!-- Update Hours -->
        <FluentButton Disabled="@(!_hasChanges)"
                      OnClick="@(async () => await UpdateHours())"
                      Appearance="Appearance.Accent">
            Update Hours
        </FluentButton>
    </FluentStack>

</div>

