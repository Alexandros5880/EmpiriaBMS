@using EmpiriaBMS.Core.ReturnModels
﻿@using EmpiriaBMS.Front.Services

@inject IDataProvider DataProvider
@inject Logging.LoggerManager Logger
@inject SharedAuthDataService _sharedAuthData

@if (LogedUserTimes != null)
{
    <div class="row gx-3 m-2 ">

        <div class="col-3">
            <span class="text-start">Personal</span>
            <TimeInput MinTime="MinTime"
                       MaxTime="@RemainingTime"
                       Time="LogedUserTimes.PersonalTime"
                       OnPropertyChanged=@(async (time) => await OnPersonalTimeChanged.InvokeAsync(time)) />
            @if (DisplayDateInput)
            {
                <div class="input-group" style="width: 150px;">
                    <FluentDatePicker Value="@PersonalTimeDatePassed"
                                      Appearance="FluentInputAppearance.Outline"
                                      ValueChanged="@(async (date) => await OnPersonalTimeDateChanged.InvokeAsync(date ?? DateTime.Now))" />
                </div>
            }
        </div>

        <div class="col-3">
            <span class="text-start">Training</span>
            <TimeInput MinTime="MinTime"
                       MaxTime="@RemainingTime"
                       Time="LogedUserTimes.TrainingTime"
                       OnPropertyChanged=@(async (time) => await OnTrainingTimeChanged.InvokeAsync(time)) />
            @if (DisplayDateInput)
            {
                <div class="input-group" style="width: 150px;">
                    <FluentDatePicker Value="@TrainingTimeDatePassed"
                                      Appearance="FluentInputAppearance.Outline"
                                      ValueChanged="@(async (date) => await OnTrainingTimeDateChanged.InvokeAsync(date ?? DateTime.Now))" />
                </div>
            }
        </div>

        <div class="col-3">
            <span class="text-start">Corporate Event</span>
            <TimeInput MinTime="MinTime"
                       MaxTime="@RemainingTime"
                       Time="LogedUserTimes.CorporateEventTime"
                       OnPropertyChanged=@(async (time) => await OnCorporateTimeChanged.InvokeAsync(time)) />
            @if (DisplayDateInput)
            {
                <div class="input-group" style="width: 150px;">
                    <FluentDatePicker Value="@CorporateTimeDatePassed"
                                      Appearance="FluentInputAppearance.Outline"
                                      ValueChanged="@(async (date) => await OnCorporateTimeDateChanged.InvokeAsync(date ?? DateTime.Now))" />
                </div>
            }
        </div>

    </div>
}

@code {
    [Parameter]
    public bool DisplayDateInput { get; set; } = false;

    [Parameter]
    public UserTimes LogedUserTimes { get; set; }

    [Parameter]
    public TimeSpan RemainingTime { get; set; }

    private TimeSpan _minTime = new TimeSpan(0, 0, 0, 0);
    [Parameter]
    public TimeSpan MinTime
    {
        get => _minTime;
        set
        {
            if (value == _minTime) return;
            _minTime = value;
        }
    }

    #region Time Changed
    [Parameter]
    public EventCallback<TimeSpan> OnPersonalTimeChanged { get; set; }

    [Parameter]
    public EventCallback<TimeSpan> OnTrainingTimeChanged { get; set; }

    [Parameter]
    public EventCallback<TimeSpan> OnCorporateTimeChanged { get; set; }
    #endregion

    #region Date Set
    [Parameter]
    public EventCallback<DateTime> OnPersonalTimeDateChanged { get; set; }

    [Parameter]
    public EventCallback<DateTime> OnTrainingTimeDateChanged { get; set; }

    [Parameter]
    public EventCallback<DateTime> OnCorporateTimeDateChanged { get; set; }

    private DateTime PersonalTimeDatePassed = DateTime.Now;
    private DateTime TrainingTimeDatePassed = DateTime.Now;
    private DateTime CorporateTimeDatePassed = DateTime.Now;
    #endregion

    #region Authorization Properties
    bool seeAdmin => _sharedAuthData.Permissions.Any(p => p.Ord == 7);
    bool getAllDisciplines => _sharedAuthData.Permissions.Any(p => p.Ord == 9);
    bool getAllDeliverables => _sharedAuthData.Permissions.Any(p => p.Ord == 10);
    bool workOnProject => _sharedAuthData.Permissions.Any(p => p.Ord == 31);
    bool workOnOffers => _sharedAuthData.Permissions.Any(p => p.Ord == 32);
    bool workOnClients => _sharedAuthData.Permissions.Any(p => p.Ord == 33);
    #endregion
}
