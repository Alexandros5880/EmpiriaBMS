@using EmpiriaBMS.Core.ReturnModels
@inject IDataProvider DataProvider
@inject Logging.LoggerManager Logger

@if (LogedUserTimes != null)
{
    <div class="row gx-3 m-2 ">
        <div class="col-4 text-center">
            <div class="d-flex justify-content-center">
                <span class="mb-2 fs-5">Personal</span>
            </div>
            <div class="d-flex justify-content-center">
                <TimeInput MinTime="MinTime"
                           MaxTime="@RemainingTime"
                           Time="LogedUserTimes.PersonalTime"
                           OnPropertyChanged=@(async (time) => await OnPersonalTimeChanged.InvokeAsync(time)) />
            </div>
        </div>
        <div class="col-4 text-center">
            <div class="d-flex justify-content-center">
                <span class="mb-2 fs-5">Training</span>
            </div>
            <div class="d-flex justify-content-center">
                <TimeInput MinTime="MinTime"
                           MaxTime="@RemainingTime"
                           Time="LogedUserTimes.TrainingTime"
                           OnPropertyChanged=@(async (time) => await OnTrainingTimeChanged.InvokeAsync(time)) />
            </div>
        </div>
        <div class="col-4 text-center">
            <div class="d-flex justify-content-center">
                <span class="mb-2 fs-5">Corporate Event</span>
            </div>
            <div class="d-flex justify-content-center">
                <TimeInput MinTime="MinTime"
                           MaxTime="@RemainingTime"
                           Time="LogedUserTimes.CorporateEventTime"
                           OnPropertyChanged=@(async (time) => await OnCorporateTimeChanged.InvokeAsync(time)) />
            </div>
        </div>
    </div>
}

@code {

    [Parameter]
    public UserTimes LogedUserTimes { get; set; }
    
    [Parameter]
    public TimeSpan RemainingTime { get; set; }

    private TimeSpan _minTime = new TimeSpan(0, 0, 0, 0);
    [Parameter]
    public TimeSpan MinTime
    {
        get => _minTime;
        set
        {
            if (value == _minTime) return;
            _minTime = value;
        }
    }

    [Parameter]
    public EventCallback<TimeSpan> OnPersonalTimeChanged { get; set; }

    [Parameter]
    public EventCallback<TimeSpan> OnTrainingTimeChanged { get; set; }

    [Parameter]
    public EventCallback<TimeSpan> OnCorporateTimeChanged { get; set; }
}
