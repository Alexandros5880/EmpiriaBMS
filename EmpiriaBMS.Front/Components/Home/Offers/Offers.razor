@using Microsoft.Fast.Components.FluentUI
@using EmpiriaBMS.Front.Components.General
@using EmpiriaBMS.Front.Components
@using EmpiriaBMS.Front.Horizontal
@using EmpiriaBMS.Front.Services
@using EmpiriaBMS.Front.Components.Home.Offers;
@using EmpiriaBMS.Models.Enum;

@inject IDialogService DialogService
@inject TeamsUserCredential teamsUserCredential
@inject MicrosoftTeams MicrosoftTeams
@inject IWebHostEnvironment HostEnvironment
@inject IConfiguration Configuration
@inject NavigationManager MyNavigationManager
@inject IDataProvider _dataProvider
@inject IMapper Mapper
@inject TimerService TimerService
@inject AuthorizeServices authorizeServices
@inject SharedAuthDataService _sharedAuthData
@inject Logging.LoggerManager Logger

<div class="row mt-2">

    <div class="col-12">
        <div class="row">

            <!-- Filters -->
            <div class="col-xxl-9 col-xl-9 col-12">
                <div class="d-flex flex-wrap
                            justify-content-xxl-start
                            justify-content-xl-start
                            justify-content-lg-start
                            justify-content-center"
                     style="column-gap: 10px; row-gap: 5px;">

                    <div style="width: 160px;">
                        <FluentCombobox @ref="resultFilterCombo"
                                        Label="Result:"
                                        Autocomplete="ComboboxAutocomplete.Both"
                                        Placeholder="Select Result..."
                                        Items="_offerResults"
                                        Height="400px"
                                        Width="140px"
                                        TOption="(string Value, string Text)"
                                        OptionText="@(c => c.Text)"
                                        OptionValue="@(c => c.Value)"
                                        @bind-Value="_selectedResultValue"
                                        SelectedOptionChanged="@(async (o) => await _onResultSelectionChanged(o))" />
                    </div>

                    <div style="width: 320px;">
                        <FluentCombobox @ref="clientFilterCombo"
                                        Label="Client:"
                                        Autocomplete="ComboboxAutocomplete.Both"
                                        AriaLabel="Pre-selected option"
                                        Height="400px"
                                        Width="300px"
                                        Items="@_clients"
                                        TOption="ClientVM"
                                        OptionValue="@((t) => t.Id.ToString())"
                                        OptionText="@(c => $"{c.CompanyName} - {c.FullName}")"
                                        OptionSelected="@(i => i.Id == _selectedClient?.Id)"
                                        SelectedOptionChanged="@(async (o) => await _onClientSelectionChanged(o))" />
                    </div>

                    <div style="width: 160px;">
                        <FluentCombobox @ref="projectFilterCombo"
                                        Label="Project:"
                                        Autocomplete="ComboboxAutocomplete.Both"
                                        AriaLabel="Pre-selected option"
                                        Height="400px"
                                        Width="140px"
                                        Items="@_projects"
                                        TOption="ProjectVM"
                                        OptionValue="@((t) => t.Id.ToString())"
                                        OptionText="@((t) => t.Name)"
                                        OptionSelected="@(i => i.Id == _selectedProject?.Id)"
                                        SelectedOptionChanged="@(async (o) => await _onProjectSelectionChanged(o))" />
                    </div>

                    <div style="width: 160px;">
                        <FluentCombobox @ref="stateFilterCombo"
                                        Label="State:"
                                        Autocomplete="ComboboxAutocomplete.Both"
                                        AriaLabel="Pre-selected option"
                                        Height="400px"
                                        Width="140px"
                                        Items="@_offerStates"
                                        TOption="OfferStateVM"
                                        OptionValue="@((t) => t.Id.ToString())"
                                        OptionText="@((t) => t.Name)"
                                        OptionSelected="@(i => i.Id == _selectedOfferState?.Id)"
                                        SelectedOptionChanged="@(async (o) => await _onStateSelectionChanged(o))" />
                    </div>

                    <div style="width: 160px;">
                        <FluentCombobox @ref="typeFilterCombo"
                                        Label="Type:"
                                        Autocomplete="ComboboxAutocomplete.Both"
                                        AriaLabel="Pre-selected option"
                                        Height="400px"
                                        Width="140px"
                                        Items="@_offerTypes"
                                        TOption="OfferTypeVM"
                                        OptionValue="@((t) => t.Id.ToString())"
                                        OptionText="@((t) => t.Name)"
                                        OptionSelected="@(i => i.Id == _selectedOfferType?.Id)"
                                        SelectedOptionChanged="@(async (o) => await _onTypeSelectionChanged(o))" />
                    </div>

                </div>
            </div>

            <!-- Add/Export Button -->
            <div class="col-xxl-3 col-xl-3 col-12 mt-xxl-0 mt-xl-0 mt-2">
                <FluentStack HorizontalAlignment="HorizontalAlignment.End"
                             Style="margin-right: 10px; min-width: 300px;">

                    @if (IsWorkingMode)
                    {
                        <FluentButton IconStart="@(new Icons.Regular.Size16.Add())"
                                      Appearance="Appearance.Accent"
                                      OnClick="@(async (e) => await _add(e))">
                            Add Offer
                        </FluentButton>
                    }

                    <FluentButton IconStart="@(new Icons.Regular.Size16.ArrowExport())"
                                  Appearance="Appearance.Outline"
                                  OnClick="@(async (e) => await ExportToCSV())"
                                  Disabled="@(FilteredItems.Count() == 0)">
                        Export
                    </FluentButton>

                </FluentStack>
            </div>

        </div>
    </div>

    <!-- Offers Table -->
    @if (_loading)
    {
        <div class="col-12 mt-5 mb-5">
            <FluentProgressRing Style="margin: 0 auto;" />
        </div>
    }
    else
    {
        <div class="col-12">
            <div class="border border-1 rounded mt-2 m-2"
                 style="height: 280px;">
                <FluentDataGrid Items="@FilteredItems"
                                ResizableColumns=true
                                Pagination="@pagination"
                                TGridItem="OfferVM"
                                GridTemplateColumns="@((IsWorkingMode ? "3fr 2fr 2fr 2fr 2fr 2fr 2fr 2fr 1fr 100px" : "3fr 2fr 2fr 2fr 2fr 2fr 2fr 1fr 100px"))"
                                style="height: 280px; overflow:auto;">

                    <!-- Result -->
                    <TemplateColumn Title="Result" Sortable="true">
                        <ChildContent>
                            @if (IsWorkingMode)
                            {
                                <select class="form-select" @onchange="@(async e => await HandleResultChange(context, e))">
                                    @foreach (var result in Enum.GetValues(typeof(OfferResult)).Cast<OfferResult>())
                                    {
                                        <option value="@(result)" selected="@(context.Result == result)">
                                            @result.GetDisplayName()
                                        </option>
                                    }
                                </select>
                            }
                            else
                            {
                                <span>@context.Result.GetDisplayName()</span>
                            }
                        </ChildContent>
                    </TemplateColumn>

                    <PropertyColumn Property="@(p => p.State.Name)" Sortable="true" Title="State" Style="min-width: 140px;" />
                    <PropertyColumn Property="@(p => p.Type.Name)" Sortable="true" Title="Type" Style="min-width: 100px;" />
                    <PropertyColumn Property="@(p => p.Category.Name)" Sortable="true" Title="Category" Align="@Align.Start" />
                    <PropertyColumn Property="@(p => p.SubCategory.Name)" Sortable="true" Title="SubCategory" Align="@Align.Start" />
                    <PropertyColumn Property="@(p => p.Code)" Sortable="true" Title="Code" Style="min-width: 120px;" />
                    <PropertyColumn Property="@(p => p.Date)" Sortable="true" Format="dd-mm-yyyy" Title="Date" Style="min-width: 100px;" />
                    <PropertyColumn Property="@(p => p.PudgetPrice)" Sortable="true" Title="Pudget" Style="min-width: 100px;" />
                    <PropertyColumn Property="@(p => p.OfferPrice)" Sortable="true" Title="Price" Style="min-width: 100px;" />

                    @if (IsWorkingMode)
                    {
                        <TemplateColumn Title="Actions" Align="@Align.End">
                            <FluentButton aria-label="Edit" IconEnd="@(new Icons.Regular.Size16.Edit())" OnClick="@(async () => await _edit(context))" />
                            <FluentButton aria-label="Delete" IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="@(async () => await _delete(context))" />
                        </TemplateColumn>
                    }

                </FluentDataGrid>
            </div>
            <div class="ms-2 me-2" style="min-width: 50%; margin: 0 auto;">
                <FluentPaginator State="@pagination">
                    <SummaryTemplate>
                        There are <strong>@(pagination.TotalItemCount ?? 0)</strong> rows
                    </SummaryTemplate>
                    <PaginationTextTemplate>
                        This is page <strong>@(pagination.CurrentPageIndex + 1)</strong> out of a total of <strong>@(pagination.LastPageIndex + 1)</strong> pages
                    </PaginationTextTemplate>
                </FluentPaginator>
            </div>
        </div>
    }
    

</div>