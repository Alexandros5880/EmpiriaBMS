@using EmpiriaMS.Models.Models
@using Microsoft.Extensions.Configuration
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Hosting
@using Microsoft.Fast.Components.FluentUI
@using EmpiriaBMS.Core
@using System.Diagnostics
@using AutoMapper
@using EmpiriaBMS.Front.ViewModel.Components

@inject TeamsFx teamsfx
@inject TeamsUserCredential teamsUserCredential
@inject MicrosoftTeams MicrosoftTeams
@inject IWebHostEnvironment HostEnvironment
@inject IConfiguration Configuration
@inject NavigationManager MyNavigationManager
@inject IDataProvider DataProvider
@inject IMapper Mapper


@if (isLoading)
{
    <div style="display: flex; justify-content: center; align-items: center; min-height: 100vh;">
        <FluentProgressRing />
    </div>
}
else
{
    if (error != null)
    {
        <p>@error</p>
    }
    else
    {

        <div class="card d-flex">
            <div class="card-body">
                <h5 class="card-title">Add User</h5>

                
                <div class="d-flex p-2">                

                    <!-- Selected Roles -->
                    <div class="form-floating ms-4">
                        <FluentLabel class="mb-3"><h6>Select Roles</h6></FluentLabel>
                        <ul class="list-group"
                            id="selectrolesselection">
                            @foreach (var role in roles)
                            {
                                <li class="list-group-item">
                                    <div class="form-check">
                                        <input class="form-check-input"
                                               type="checkbox"
                                               @bind=role.IsChecked>
                                        <label class="form-check-label" for="flexCheckChecked">
                                            @role.Name
                                        </label>
                                    </div>
                                </li>
                            }
                        </ul>
                    </div>

                </div>

                <br/>
                <br/>
                <FluentLabel class="mb-3"><h6>MicrosoftTeams LogedIn User Data:</h6></FluentLabel>
                <div style="display:block; width:100%;">
                    @if (runInTeams)
                    {
                        <div>
                            <label>Username: </label><b>@userName</b>
                            <br />
                            <label>Email: </label><b>@email</b>
                            <br />
                            <label>User Role: </label><b>@UserRole</b>
                            <br />
                            <label>Team Type: </label><b>@teamType</b>
                            <br />
                        </div>
                    }
                </div>
           
            </div>
        </div>

       
    }
}



@code {
    string error = null;
    bool isLoading = true;
    bool runInTeams = false;
    List<RoleVM> roles;

    UserInfo user;
    string email;
    string userName;
    TeamsContext microsoftTeamsContext;
    TeamsTeamContext teamContext;
    UserTeamRole? UserRole;
    bool isNewUser = false;
    TeamType? teamType;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            runInTeams = await MicrosoftTeams.IsInTeams();
            if (runInTeams)
            {
                user = await teamsUserCredential.GetUserInfoAsync();
                email = user?.PreferredUserName;
                userName = user?.DisplayName;
                microsoftTeamsContext = await MicrosoftTeams.GetTeamsContextAsync();
                teamContext = microsoftTeamsContext?.Team;
                UserRole = teamContext?.UserRole;
                teamType = teamContext?.Type;
                isNewUser = UserRole == null;
            }

            try
            {
                roles = (await DataProvider.Roles.GetAll())
                        .Select(r => Mapper.Map<RoleVM>(r)).ToList();
            }
            catch (Exception ex)
            {
                error = $"Get Roles Exception: {ex.Message}";
            }

            isLoading = false;

            // Update UI
            StateHasChanged();
        }

    }

}
