@page "/"
@page "/projects"
@using Microsoft.Extensions.Configuration
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Hosting
@using Microsoft.Fast.Components.FluentUI
@using EmpiriaBMS.Front.ViewModel.Components
@using AutoMapper
@using EmpiriaBMS.Core
@using System.Collections.ObjectModel
@using System.Reflection;
@using EmpiriaMS.Models.Enums
@using System.ComponentModel
@using EmpiriaBMS.Front.ViewModel.DefaultComponents
@using EmpiriaBMS.Front.Components.General
@inject TeamsFx teamsfx
@inject TeamsUserCredential teamsUserCredential
@inject MicrosoftTeams MicrosoftTeams
@inject IWebHostEnvironment HostEnvironment
@inject IConfiguration Configuration
@inject NavigationManager MyNavigationManager
@inject IDataProvider DataProvider
@inject IMapper Mapper

<!-- card shadow bg-white rounded container text-center align-middle -->
<div class="row justify-content-center mt-3">
    <div class="col-auto" style="width: 100%; height: 100%;">
        @if (startLoading)
        {
            <div class="mb-5 mt-5" style="display: flex; justify-content: center; align-items: center;">
                <FluentProgressRing />
            </div>
        }
        else
        {
            <div class="row m-4">
                <div class="col-md-9" style="overflow-x:hidden; margin: 0 auto;">
                    <!-- Headder -->
                    <div class="mb-3 table-responsive">
                        <table class="table shadow">
                            <tr>
                                <td>Current User Name</td>
                                <td><div class="text-center">77h</div></td>
                            </tr>
                        </table>
                    </div>
                    <!-- Table -->
                    <div class="table-responsive">
                        <table class="table shadow bg-white rounded table-hover">
                            <thead>
                                <tr>
                                    <th scope="col">
                                        <input type="checkbox"
                                               class="big-checkbox"
                                               @bind="IsAllChecked"
                                               @onclick="SelectionChanged" />
                                    </th>
                                    <th scope="col">Name</th>
                                    <th scope="col">PlanType</th>
                                    <th scope="col">Drawing</th>
                                    <th scope="col">Completed</th>
                                    <th scope="col">ManHours</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var project in _data)
                                {
                                    <tr>
                                        <th scope="row">
                                            <div class="col">
                                                <input type="checkbox"
                                                       class="mt-2 big-checkbox"
                                                       @bind="project.IsChecked" />
                                            </div>
                                        </th>
                                        <td>
                                            <input type="text" class="form-control" @bind="project.Name">
                                        </td>
                                        <td>
                                            <select class="form-select"
                                                    style="width:150px;"
                                                    @bind="project.PlanType">
                                                @foreach (var opt in projectPlanTypes)
                                                {
                                                    <option value="@opt">@opt</option>
                                                }
                                            </select>
                                        </td>
                                        <td>
                                            <input type="text"
                                                   class="form-control"
                                                   style="width:200px;"
                                                   @bind="project.Drawing">
                                        </td>
                                        <td>
                                            <div class="input-group mb-3" style="width:150px;">
                                                <input type="number" class="form-control" @bind="project.Completed">
                                                <div class="input-group-append">
                                                    <span class="input-group-text" id="basic-addon2">%</span>
                                                </div>
                                            </div>
                                        </td>
                                        <td>
                                            <div class="input-group mb-3" style="width:150px;">
                                                <input type="number" class="form-control" @bind="project.ManHours">
                                                <div class="input-group-append">
                                                    <span class="input-group-text" id="basic-addon2">h</span>
                                                </div>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    <Paginator Renderer="@_getData" SetPeginator="@_paginator" />
                </div>
                <!-- Selected Invoice -->
                <div class="col-md-3 mt-md-5">
                    <div class="card">
                        <p>Invoice Info</p>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<FilterProgressRing FilterLoading="@filterLoading"/>

@code {
    bool startLoading = true;
    bool filterLoading = false;

    bool runInTeams = false;
    bool IsAllChecked = false;

    private ObservableCollection<ProjectVM> _data = new ObservableCollection<ProjectVM>();
    List<PlanType> projectPlanTypes = Enum.GetValues(typeof(PlanType)).OfType<PlanType>().ToList();
    private PaginatorVM _paginator = new PaginatorVM(7);

    protected override async void OnInitialized()
    {
        startLoading = true;
        await _getData();

        base.OnInitialized();

        startLoading = false;
        // Update UI
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            runInTeams = await MicrosoftTeams.IsInTeams();
            if (runInTeams)
            {

            }

            // Update UI
            //StateHasChanged();
        }

    }

    private void SelectionChanged()
    {
        foreach (var p in _data)
            p.IsChecked = !IsAllChecked;
    }

    private async Task _getData()
    {
        filterLoading = !startLoading ? true : filterLoading;
        try
        {
            // Todo: Find a way to add this in to PaginatorVM
            _paginator.RecordsCount = await DataProvider.Projects.Count();
            var divide = _paginator.RecordsCount / _paginator.PageSize;
            var quotient = _paginator.RecordsCount % _paginator.PageSize;
            _paginator.PagesCounter = quotient == 0 ? divide : divide + 1;

            var data = (await DataProvider.Projects.GetAll(_paginator.PageSize, _paginator.PageIndex))
                        .Select(p => Mapper.Map<ProjectVM>(p))
                        .ToList();
            _data.Clear();
            data.ForEach(_data.Add);
        }
        catch (Exception ex)
        {
            // TODO: Log Error
        }
        filterLoading = !startLoading ? false : filterLoading;
    }
}
