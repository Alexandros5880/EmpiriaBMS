@page "/"
@page "/projects"
@inject TeamsFx teamsfx
@inject TeamsUserCredential teamsUserCredential
@inject MicrosoftTeams MicrosoftTeams
@inject IWebHostEnvironment HostEnvironment
@inject IConfiguration Configuration
@inject NavigationManager MyNavigationManager
@inject IDataProvider DataProvider
@inject IMapper Mapper

<!-- card shadow bg-white rounded container text-center align-middle -->
<div class="row justify-content-center mt-3">
    <div class="col-auto" style="width: 100%; height: 100%;">
        @if (startLoading)
        {
            <div class="mb-5 mt-5" style="display: flex; justify-content: center; align-items: center;">
                <FluentProgressRing />
            </div>
        }
        else
        {
            <div class="row m-4">
                <div class="col-md-9" style="overflow-x:hidden; margin: 0 auto;">
                    <!-- Headder -->
                    <div class="mb-3">
                        @if (_logedUser != null)
                        {
                            <div class="row default-background shadow" style="overflow-x:hidden;">
                                <div class="col-sm-10">
                                    @foreach (var role in _logedUser.Roles)
                                    {
                                        <div>@role.Name</div>
                                    }
                                </div>
                                <div class="col-sm-2 row primary-bg-color">
                                    <FluentButton BackgroundColor="Transparent"
                                                  Appearance="Appearance.Lightweight"
                                                  @onclick="@(() => ToogleEditHoursDialog(true))">
                                        <span class="mt-2">@(_logedUser.Hours)h</span>
                                        <FluentIcon Icon="Edit" />
                                    </FluentButton>
                                </div>
                            </div>
                        }
                    </div>
                    <!-- Table -->
                    <div class="table-responsive">
                        <table class="table shadow rounded table-hover">
                            <thead>
                                <tr>
                                    <th scope="col" class="table-header">
                                        <input type="checkbox"
                                               class="big-checkbox"
                                               @bind="IsAllChecked"
                                               @onclick="SelectionChanged" />
                                    </th>
                                    <th scope="col" class="table-header">Name</th>
                                    <th scope="col" class="table-header">PlanType</th>
                                    <th scope="col" class="table-header">Drawing</th>
                                    <th scope="col" class="table-header">Completed</th>
                                    <th scope="col" class="table-header">ManHours</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var project in _data)
                                {
                                    <tr clss="align-middle" @onclick="@(() => OnSelectProject(project))">
                                        <th scope="row" class="@((_selectedProject.Id.Equals(project.Id) ? "highlight" : ""))">
                                            <div class="col">
                                                <input type="checkbox"
                                                       class="mt-2 big-checkbox"
                                                       @bind="project.IsChecked" />
                                            </div>
                                        </th>
                                        <td class="@((_selectedProject.Id.Equals(project.Id) ? "highlight" : ""))">
                                            <input type="text" class="form-control" @bind="project.Name">
                                        </td>
                                        <td class="@((_selectedProject.Id.Equals(project.Id) ? "highlight" : ""))">
                                            <select class="form-select"
                                                    style="width:150px;"
                                                    @bind="project.PlanType">
                                                @foreach (var opt in projectPlanTypes)
                                                {
                                                    <option value="@opt">@opt</option>
                                                }
                                            </select>
                                        </td>
                                        <td class="@((_selectedProject.Id.Equals(project.Id) ? "highlight" : ""))">
                                            <input type="text"
                                                   class="form-control"
                                                   style="width:200px;"
                                                   @bind="project.Drawing">
                                        </td>
                                        <td class="@((_selectedProject.Id.Equals(project.Id) ? "highlight" : ""))">
                                            <div class="input-group mb-3" style="width:150px;">
                                                <input type="number" class="form-control" @bind="project.Completed">
                                                <div class="input-group-append">
                                                    <span class="input-group-text" id="basic-addon2">%</span>
                                                </div>
                                            </div>
                                        </td>
                                        <td class="@((_selectedProject.Id.Equals(project.Id) ? "highlight" : ""))">
                                            <div class="input-group mb-3" style="width:150px;">
                                                <input type="number" class="form-control" @bind="project.ManHours">
                                                <div class="input-group-append">
                                                    <span class="input-group-text" id="basic-addon2">h</span>
                                                </div>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    <Paginator Renderer="@_getData" SetPeginator="@_paginator" />
                </div>
                <!-- Selected Invoice -->
                <div class="col-md-3 mt-md-5">
                    <InvoiceDetails Invoice="@_selectedInvoice" />
                </div>
            </div>
        }
    </div>
</div>

<FilterProgressRing FilterLoading="@filterLoading"/>

<!-- Edit Hours Dialos -->
<FluentDialog @ref="EditHoursDialog" Hidden=@(startLoading || !isEditDialogOdepened)>

    <FluentDialogHeader>
        Edit Hours:
    </FluentDialogHeader>

    <FluentDialogBody>
        Dialog Body
    </FluentDialogBody>

    <FluentDialogFooter>
        <FluentButton Text="OK" OnClick=@(() => ToogleEditHoursDialog(false)) />
        <FluentButton Text="Cancel" OnClick=@(() => ToogleEditHoursDialog(false)) />
    </FluentDialogFooter>

</FluentDialog>



@code {
    bool startLoading = true;
    bool filterLoading = false;

    bool runInTeams = false;
    bool IsAllChecked = false;

    private FluentDialog? EditHoursDialog;
    private bool isEditDialogOdepened = false;

    private ObservableCollection<ProjectVM> _data = new ObservableCollection<ProjectVM>();
    List<PlanType> projectPlanTypes = Enum.GetValues(typeof(PlanType)).OfType<PlanType>().ToList();
    private PaginatorVM _paginator = new PaginatorVM(7);

    private UserVM _logedUser;

    private ProjectVM _selectedProject = new ProjectVM();
    private InvoiceVM _selectedInvoice = new InvoiceVM();

    protected override async void OnInitialized()
    {
        startLoading = true;
        await _getLogedUser();
        await _getData();
        startLoading = false;
        base.OnInitialized();
        StateHasChanged();
        ToogleEditHoursDialog(false);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            runInTeams = await MicrosoftTeams.IsInTeams();
            if (runInTeams)
            {

            }

            // Update UI
            //StateHasChanged();
        }

    }

    private void ToogleEditHoursDialog(bool open)
    {
        isEditDialogOdepened = open;
        if (open)
            EditHoursDialog.Show();
        else
            EditHoursDialog.Hide();
    }

    private void OnSelectProject(ProjectVM project)
    {
        _selectedProject = project;
        _selectedInvoice = Mapper.Map<InvoiceVM>(project.Invoice);
    }

    private void SelectionChanged()
    {
        foreach (var p in _data)
            p.IsChecked = !IsAllChecked;
    }

    private async Task _getData()
    {
        filterLoading = !startLoading ? true : filterLoading;
        try
        {
            // Todo: Find a way to add this in to PaginatorVM
            _paginator.RecordsCount = await DataProvider.Projects.Count();
            var divide = _paginator.RecordsCount / _paginator.PageSize;
            var quotient = _paginator.RecordsCount % _paginator.PageSize;
            _paginator.PagesCounter = quotient == 0 ? divide : divide + 1;

            // TODO: Get My Project And Down
            var data = (await DataProvider.Projects.GetAll(_paginator.PageSize, _paginator.PageIndex))
                        .Select(p => Mapper.Map<ProjectVM>(p))
                        .ToList();
            _data.Clear();
            data.ForEach(_data.Add);
            _selectedProject = _data.FirstOrDefault();
            _selectedInvoice = _selectedProject.Invoice;
        }
        catch (Exception ex)
        {
            // TODO: Log Error
        }
        filterLoading = !startLoading ? false : filterLoading;
    }

    private async Task _getLogedUser()
    {
        try
        {
            // TODO: Get Teams Loged User And Mach him With Oure Users

            var defaultRoleId = await GetProjectManagersRoleId("Project Managers");
            if (defaultRoleId == null)
                throw new Exception("Exception `Project Managers` role not exists!");

            var dbUser = (await DataProvider.Roles.GetUsers(defaultRoleId)).FirstOrDefault();
            //string defaultUserId = "cc71da774225492093e3cc418569f1a524";
            // var dbUser = await DataProvider.Employees.Get(defaultUserId);
            _logedUser = Mapper.Map<UserVM>(dbUser);
            _logedUser.Roles = (await DataProvider.Employees.GetRoles(dbUser.Id))
                                        .Select(r => Mapper.Map<RoleVM>(r))
                                        .ToList();
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"Exception: {ex.Message}");
            // TODO: Log Error
        }
    }

    private async Task<String> GetProjectManagersRoleId(string roleName)
    {
        try
        {
            return (await DataProvider.Roles
                                .GetAll(r => r.Name.Equals(roleName)))
                                .FirstOrDefault().Id;
        }
        catch (Exception ex)
        {
            return null;
        }
    }

}
