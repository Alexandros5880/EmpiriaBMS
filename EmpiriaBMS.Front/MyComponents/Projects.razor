@using Microsoft.Extensions.Configuration
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Hosting
@using Microsoft.Fast.Components.FluentUI
@inject TeamsFx teamsfx
@inject TeamsUserCredential teamsUserCredential
@inject MicrosoftTeams MicrosoftTeams
@inject IWebHostEnvironment HostEnvironment
@inject IConfiguration Configuration
@inject NavigationManager MyNavigationManager


@if (isLoading)
{
    <div style="display: flex; justify-content: center; align-items: center; min-height: 100vh;">
        <FluentProgressRing />
    </div>
}
else if (isNewUser)
{
    <AddUser />
}
else
{
    <h3>Projects</h3>

    <div style="display:block; width:100%;">
        @if (runInTeams)
        {
            <div>
                <label>Username: </label><b>@userName</b>
                <br />
                <label>Email: </label><b>@email</b>
                <br />
                <label>User Role: </label><b>@UserRole</b>
                <br />
                <label>Team Type: </label><b>@teamType</b>
                <br />
            </div>
        }
    </div>
    
}


@code {
    bool isLoading = true;
    bool runInTeams = false;
    UserInfo user;
    string email;
    string userName;
    TeamsContext microsoftTeamsContext;
    TeamsTeamContext teamContext;
    UserTeamRole? UserRole;
    bool isNewUser = false;
    TeamType? teamType;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            runInTeams = await MicrosoftTeams.IsInTeams();
            if (runInTeams)
            {
                user = await teamsUserCredential.GetUserInfoAsync();
                email = user?.PreferredUserName;
                userName = user?.DisplayName;
                microsoftTeamsContext = await MicrosoftTeams.GetTeamsContextAsync();
                teamContext = microsoftTeamsContext?.Team;
                UserRole = teamContext?.UserRole;
                teamType = teamContext?.Type;
                isNewUser = UserRole == null;
            }

            isLoading = false;
            
            // Update UI
            StateHasChanged();
        }

    }

}
